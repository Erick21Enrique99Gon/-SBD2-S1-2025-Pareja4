CREATE TABLE "line_score" (
  "game_sequence" INTEGER,
  "game_id" int,
  "team_id_home" int,
  "team_wins_losses_home" TEXT,
  "pts_qtr1_home" INTEGER,
  "pts_qtr2_home" INTEGER,
  "pts_qtr3_home" INTEGER,
  "pts_qtr4_home" INTEGER,
  "pts_ot1_home" INTEGER,
  "pts_ot2_home" INTEGER,
  "pts_ot3_home" INTEGER,
  "pts_ot4_home" INTEGER,
  "pts_ot5_home" INTEGER,
  "pts_ot6_home" INTEGER,
  "pts_ot7_home" INTEGER,
  "pts_ot8_home" INTEGER,
  "pts_ot9_home" INTEGER,
  "pts_ot10_home" INTEGER,
  "pts_home" REAL,
  "team_id_away" TEXT,
  "team_wins_losses_away" TEXT,
  "pts_qtr1_away" INTEGER,
  "pts_qtr2_away" INTEGER,
  "pts_qtr3_away" INTEGER,
  "pts_qtr4_away" INTEGER,
  "pts_ot1_away" INTEGER,
  "pts_ot2_away" INTEGER,
  "pts_ot3_away" INTEGER,
  "pts_ot4_away" INTEGER,
  "pts_ot5_away" INTEGER,
  "pts_ot6_away" INTEGER,
  "pts_ot7_away" INTEGER,
  "pts_ot8_away" INTEGER,
  "pts_ot9_away" INTEGER,
  "pts_ot10_away" INTEGER,
  "pts_away" REAL
);

CREATE TABLE "play_by_play" (
  "game_id" int,
  "eventnum" INTEGER,
  "eventmsgtype" INTEGER,
  "eventmsgactiontype" INTEGER,
  "period" INTEGER,
  "wctimestring" TEXT,
  "pctimestring" TEXT,
  "homedescription" TEXT,
  "neutraldescription" TEXT,
  "visitordescription" TEXT,
  "score" TEXT,
  "scoremargin" TEXT,
  "person1type" REAL,
  "player1_id" int,
  "player1_team_id" int,
  "person2type" REAL,
  "player2_id" int,
  "player2_team_id" int,
  "person3type" REAL,
  "player3_id" int,
  "player3_team_id" int,
  "video_available_flag" TEXT
);

CREATE TABLE "other_stats" (
  "game_id" int,
  "league_id" int,
  "team_id_home" int,
  "pts_paint_home" INTEGER,
  "pts_2nd_chance_home" INTEGER,
  "pts_fb_home" INTEGER,
  "largest_lead_home" INTEGER,
  "lead_changes" INTEGER,
  "times_tied" INTEGER,
  "team_turnovers_home" INTEGER,
  "total_turnovers_home" INTEGER,
  "team_rebounds_home" INTEGER,
  "pts_off_to_home" INTEGER,
  "team_id_away" int,
  "pts_paint_away" INTEGER,
  "pts_2nd_chance_away" INTEGER,
  "pts_fb_away" INTEGER,
  "largest_lead_away" INTEGER,
  "team_turnovers_away" INTEGER,
  "total_turnovers_away" INTEGER,
  "team_rebounds_away" INTEGER,
  "pts_off_to_away" INTEGER
);

CREATE TABLE "game_summary" (
  "game_date_est" TIMESTAMP,
  "game_sequence" INTEGER,
  "game_id" int,
  "game_status_id" INTEGER,
  "game_status_text" TEXT,
  "gamecode" TEXT,
  "home_team_id" int,
  "visitor_team_id" int,
  "season" int,
  "live_period" INTEGER,
  "live_pc_time" TEXT,
  "natl_tv_broadcaster_abbreviation" TEXT,
  "live_period_time_bcast" TEXT,
  "wh_status" INTEGER
);

CREATE TABLE "inactive_players" (
  "game_id" int,
  "player_id" int,
  "jersey_num" TEXT,
  "team_id" int
);

CREATE TABLE "officials" (
  "official_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "first_name" TEXT,
  "last_name" TEXT,
  "jersey_num" TEXT
);

CREATE TABLE "official_of_game" (
  "game_id" int,
  "official_id" int
);

CREATE TABLE "season_type" (
  "season_type_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "season_type" TEXT
);

CREATE TABLE "game" (
  "season_id" int,
  "team_id_home" int,
  "game_id" int,
  "matchup_home" TEXT,
  "wl_home" TEXT,
  "min" INTEGER,
  "fgm_home" REAL,
  "fga_home" REAL,
  "fg_pct_home" REAL,
  "fg3m_home" REAL,
  "fg3a_home" REAL,
  "fg3_pct_home" REAL,
  "ftm_home" REAL,
  "fta_home" REAL,
  "ft_pct_home" REAL,
  "oreb_home" REAL,
  "dreb_home" REAL,
  "reb_home" REAL,
  "ast_home" REAL,
  "stl_home" REAL,
  "blk_home" REAL,
  "tov_home" REAL,
  "pf_home" REAL,
  "pts_home" REAL,
  "plus_minus_home" INTEGER,
  "video_available_home" INTEGER,
  "team_id_away" int,
  "matchup_away" TEXT,
  "wl_away" TEXT,
  "fgm_away" REAL,
  "fga_away" REAL,
  "fg_pct_away" REAL,
  "fg3m_away" REAL,
  "fg3a_away" REAL,
  "fg3_pct_away" REAL,
  "ftm_away" REAL,
  "fta_away" REAL,
  "ft_pct_away" REAL,
  "oreb_away" REAL,
  "dreb_away" REAL,
  "reb_away" REAL,
  "ast_away" REAL,
  "stl_away" REAL,
  "blk_away" REAL,
  "tov_away" REAL,
  "pf_away" REAL,
  "pts_away" REAL,
  "plus_minus_away" INTEGER,
  "video_available_away" INTEGER,
  "season_type_id" INT
);

CREATE TABLE "game_attendance" (
  "game_id" int,
  "attendance" INTEGER,
  "game_time" TEXT
);

CREATE TABLE "game_date" (
  "game_id" int,
  "game_date" TIMESTAMP
);

CREATE TABLE "game_info" (
  "game_id" TEXT UNIQUE PRIMARY KEY
);

CREATE TABLE "draft_combine_stats" (
  "season" int,
  "player_id" int,
  "position_id" int,
  "height_wo_shoes" REAL,
  "height_wo_shoes_ft_in" TEXT,
  "height_w_shoes" REAL,
  "height_w_shoes_ft_in" TEXT,
  "weight" TEXT,
  "wingspan" REAL,
  "wingspan_ft_in" TEXT,
  "standing_reach" REAL,
  "standing_reach_ft_in" TEXT,
  "body_fat_pct" TEXT,
  "hand_length" TEXT,
  "hand_width" TEXT,
  "standing_vertical_leap" REAL,
  "max_vertical_leap" REAL,
  "lane_agility_time" REAL,
  "modified_lane_agility_time" REAL,
  "three_quarter_sprint" REAL,
  "bench_press" REAL,
  "spot_fifteen_corner_left" TEXT,
  "spot_fifteen_break_left" TEXT,
  "spot_fifteen_top_key" TEXT,
  "spot_fifteen_break_right" TEXT,
  "spot_fifteen_corner_right" TEXT,
  "spot_college_corner_left" TEXT,
  "spot_college_break_left" TEXT,
  "spot_college_top_key" TEXT,
  "spot_college_break_right" TEXT,
  "spot_college_corner_right" TEXT,
  "spot_nba_corner_left" TEXT,
  "spot_nba_break_left" TEXT,
  "spot_nba_top_key" TEXT,
  "spot_nba_break_right" TEXT,
  "spot_nba_corner_right" TEXT,
  "off_drib_fifteen_break_left" TEXT,
  "off_drib_fifteen_top_key" TEXT,
  "off_drib_fifteen_break_right" TEXT,
  "off_drib_college_break_left" TEXT,
  "off_drib_college_top_key" TEXT,
  "off_drib_college_break_right" TEXT,
  "on_move_fifteen" TEXT,
  "on_move_college" TEXT
);

CREATE TABLE "position" (
  "position_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "position" TEXT
);

CREATE TABLE "last_affiliation" (
  "last_affiliation_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "last_affiliation" TEXT
);

CREATE TABLE "country" (
  "country_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "country" TEXT
);

CREATE TABLE "school" (
  "school_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "school" TEXT
);

CREATE TABLE "common_player_info" (
  "person_id" int,
  "display_fi_last" TEXT,
  "player_slug" TEXT,
  "birthdate" TIMESTAMP,
  "country_id" INT,
  "last_affiliation_id" int,
  "height" TEXT,
  "weight" TEXT,
  "season_exp" REAL,
  "jersey" TEXT,
  "position_id" int,
  "rosterstatus" TEXT,
  "games_played_current_season_flag" TEXT,
  "team_id" INTEGER,
  "playercode" TEXT,
  "from_year" REAL,
  "to_year" REAL,
  "dleague_flag" TEXT,
  "nba_flag" TEXT,
  "games_played_flag" TEXT,
  "draft_year" TEXT,
  "draft_round" TEXT,
  "draft_number" TEXT,
  "greatest_75_flag" TEXT
);

CREATE TABLE "player_school" (
  "school_id" int,
  "person_id" TEXT
);

CREATE TABLE "draft" (
  "draft_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "draft_type" TEXT
);

CREATE TABLE "Organization_type" (
  "organization_type_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "organization_type" TEXT
);

CREATE TABLE "Organization" (
  "organization_id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "organization" TEXT,
  "organization_type_id" int
);

CREATE TABLE "draft_history" (
  "person_id" int,
  "season" integer,
  "round_number" INTEGER,
  "round_pick" INTEGER,
  "overall_pick" INTEGER,
  "draft_id" int,
  "team_id" int,
  "organization_id" int,
  "player_profile_flag" int
);

CREATE TABLE "player_active" (
  "id" int,
  "s_active" INTEGER
);

CREATE TABLE "team_details" (
  "team_id" int,
  "arena" TEXT,
  "arenacapacity" REAL,
  "owner" TEXT,
  "generalmanager" TEXT,
  "headcoach" TEXT,
  "dleagueaffiliation" TEXT,
  "facebook" TEXT,
  "instagram" TEXT,
  "twitter" TEXT
);

CREATE TABLE "team_history" (
  "team_id" int,
  "year_active_till" INTEGER
);

CREATE TABLE "cities" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "city" TEXT
);

CREATE TABLE "states" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  "state" TEXT
);

CREATE TABLE "team" (
  "id" int UNIQUE PRIMARY KEY,
  "full_name" TEXT,
  "abbreviation" TEXT,
  "nickname" TEXT,
  "city" int,
  "state" int,
  "year_founded" REAL
);

CREATE TABLE "player" (
  "id" int UNIQUE PRIMARY KEY,
  "first_name" TEXT,
  "last_name" TEXT
);

ALTER TABLE "team" ADD FOREIGN KEY ("city") REFERENCES "cities" ("id");

ALTER TABLE "team" ADD FOREIGN KEY ("state") REFERENCES "states" ("id");

ALTER TABLE "team_history" ADD FOREIGN KEY ("team_id") REFERENCES "team" ("id");

ALTER TABLE "team_details" ADD FOREIGN KEY ("team_id") REFERENCES "team" ("id");

ALTER TABLE "player_active" ADD FOREIGN KEY ("id") REFERENCES "player" ("id");

ALTER TABLE "draft_history" ADD FOREIGN KEY ("person_id") REFERENCES "player" ("id");

ALTER TABLE "draft_history" ADD FOREIGN KEY ("team_id") REFERENCES "team" ("id");

ALTER TABLE "common_player_info" ADD FOREIGN KEY ("person_id") REFERENCES "player" ("id");

ALTER TABLE "common_player_info" ADD FOREIGN KEY ("team_id") REFERENCES "team" ("id");

ALTER TABLE "draft_combine_stats" ADD FOREIGN KEY ("player_id") REFERENCES "player" ("id");

ALTER TABLE "game" ADD FOREIGN KEY ("team_id_home") REFERENCES "team" ("id");

ALTER TABLE "game" ADD FOREIGN KEY ("team_id_away") REFERENCES "team" ("id");

ALTER TABLE "game_attendance" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "game" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "game_date" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "official_of_game" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "official_of_game" ADD FOREIGN KEY ("official_id") REFERENCES "officials" ("official_id");

ALTER TABLE "inactive_players" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "inactive_players" ADD FOREIGN KEY ("team_id") REFERENCES "team" ("id");

ALTER TABLE "game_summary" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "game_summary" ADD FOREIGN KEY ("home_team_id") REFERENCES "team" ("id");

ALTER TABLE "game_summary" ADD FOREIGN KEY ("visitor_team_id") REFERENCES "team" ("id");

ALTER TABLE "other_stats" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "other_stats" ADD FOREIGN KEY ("team_id_home") REFERENCES "team" ("id");

ALTER TABLE "other_stats" ADD FOREIGN KEY ("team_id_away") REFERENCES "team" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player1_id") REFERENCES "player" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player2_id") REFERENCES "player" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player3_id") REFERENCES "player" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player1_team_id") REFERENCES "team" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player2_team_id") REFERENCES "team" ("id");

ALTER TABLE "play_by_play" ADD FOREIGN KEY ("player3_team_id") REFERENCES "team" ("id");

ALTER TABLE "line_score" ADD FOREIGN KEY ("game_id") REFERENCES "game_info" ("game_id");

ALTER TABLE "line_score" ADD FOREIGN KEY ("team_id_home") REFERENCES "team" ("id");

ALTER TABLE "line_score" ADD FOREIGN KEY ("team_id_away") REFERENCES "team" ("id");

ALTER TABLE "draft_history" ADD FOREIGN KEY ("draft_id") REFERENCES "draft" ("draft_id");

ALTER TABLE "draft_history" ADD FOREIGN KEY ("organization_id") REFERENCES "Organization" ("organization_id");

ALTER TABLE "Organization" ADD FOREIGN KEY ("organization_type_id") REFERENCES "Organization_type" ("organization_type_id");

ALTER TABLE "player_school" ADD FOREIGN KEY ("person_id") REFERENCES "player" ("id");

ALTER TABLE "player_school" ADD FOREIGN KEY ("school_id") REFERENCES "school" ("school_id");

ALTER TABLE "common_player_info" ADD FOREIGN KEY ("country_id") REFERENCES "country" ("country_id");

ALTER TABLE "common_player_info" ADD FOREIGN KEY ("position_id") REFERENCES "position" ("position_id");

ALTER TABLE "common_player_info" ADD FOREIGN KEY ("last_affiliation_id") REFERENCES "last_affiliation" ("last_affiliation_id");

ALTER TABLE "draft_combine_stats" ADD FOREIGN KEY ("position_id") REFERENCES "position" ("position_id");

ALTER TABLE "game" ADD FOREIGN KEY ("season_type_id") REFERENCES "season_type" ("season_type_id");

ALTER TABLE public.team ADD COLUMN team_code TEXT;

ALTER TABLE public.player_school
DROP COLUMN person_id;
ALTER TABLE public.player_school
ADD COLUMN person_id INT;

ALTER TABLE public.player_school
ADD CONSTRAINT fk_person_id FOREIGN KEY (person_id) REFERENCES public.player(id);


-- Nuevo

create table if not exists line_score
(
    game_sequence         integer,
    game_id               integer,
    team_id_home          integer,
    team_wins_losses_home text,
    pts_qtr1_home         integer,
    pts_qtr2_home         integer,
    pts_qtr3_home         integer,
    pts_qtr4_home         integer,
    pts_ot1_home          integer,
    pts_ot2_home          integer,
    pts_ot3_home          integer,
    pts_ot4_home          integer,
    pts_ot5_home          integer,
    pts_ot6_home          integer,
    pts_ot7_home          integer,
    pts_ot8_home          integer,
    pts_ot9_home          integer,
    pts_ot10_home         integer,
    pts_home              real,
    team_id_away          text,
    team_wins_losses_away text,
    pts_qtr1_away         integer,
    pts_qtr2_away         integer,
    pts_qtr3_away         integer,
    pts_qtr4_away         integer,
    pts_ot1_away          integer,
    pts_ot2_away          integer,
    pts_ot3_away          integer,
    pts_ot4_away          integer,
    pts_ot5_away          integer,
    pts_ot6_away          integer,
    pts_ot7_away          integer,
    pts_ot8_away          integer,
    pts_ot9_away          integer,
    pts_ot10_away         integer,
    pts_away              real
);

alter table line_score
    owner to admin;

create table if not exists other_stats
(
    game_id              integer,
    league_id            integer,
    team_id_home         integer,
    pts_paint_home       integer,
    pts_2nd_chance_home  integer,
    pts_fb_home          integer,
    largest_lead_home    integer,
    lead_changes         integer,
    times_tied           integer,
    team_turnovers_home  integer,
    total_turnovers_home integer,
    team_rebounds_home   integer,
    pts_off_to_home      integer,
    team_id_away         integer,
    pts_paint_away       integer,
    pts_2nd_chance_away  integer,
    pts_fb_away          integer,
    largest_lead_away    integer,
    team_turnovers_away  integer,
    total_turnovers_away integer,
    team_rebounds_away   integer,
    pts_off_to_away      integer
);

alter table other_stats
    owner to admin;

create table if not exists officials
(
    official_id integer generated by default as identity
        primary key,
    first_name  text,
    last_name   text,
    jersey_num  text
);

alter table officials
    owner to admin;

create table if not exists season_type
(
    season_type_id integer generated by default as identity
        primary key,
    season_type    text
);

alter table season_type
    owner to admin;

create table if not exists game_info
(
    game_id integer not null
        primary key
);

alter table game_info
    owner to admin;

create table if not exists official_of_game
(
    game_id     integer
        references game_info,
    official_id integer
        references officials
);

alter table official_of_game
    owner to admin;

create table if not exists game_attendance
(
    game_id    integer
        references game_info,
    attendance integer,
    game_time  text
);

alter table game_attendance
    owner to admin;

create table if not exists game_date
(
    game_id   integer
        references game_info,
    game_date timestamp
);

alter table game_date
    owner to admin;

create table if not exists position
(
    position_id integer generated by default as identity
        primary key,
    position    text
);

alter table position
    owner to admin;

create table if not exists last_affiliation
(
    last_affiliation_id integer generated by default as identity
        primary key,
    last_affiliation    text
);

alter table last_affiliation
    owner to admin;

create table if not exists country
(
    country_id integer generated by default as identity
        primary key,
    country    text
);

alter table country
    owner to admin;

create table if not exists school
(
    school_id integer generated by default as identity
        primary key,
    school    text
);

alter table school
    owner to admin;

create table if not exists draft
(
    draft_id   integer generated by default as identity
        primary key,
    draft_type text
);

alter table draft
    owner to admin;

create table if not exists "Organization_type"
(
    organization_type_id integer generated by default as identity
        primary key,
    organization_type    text
);

alter table "Organization_type"
    owner to admin;

create table if not exists "Organization"
(
    organization_id      integer generated by default as identity
        primary key,
    organization         text,
    organization_type_id integer
);

alter table "Organization"
    owner to admin;

create table if not exists cities
(
    id   integer generated by default as identity
        primary key,
    city text
);

alter table cities
    owner to admin;

create table if not exists states
(
    id    integer generated by default as identity
        primary key,
    state text
);

alter table states
    owner to admin;

create table if not exists team
(
    id           integer not null
        primary key,
    full_name    text,
    abbreviation text,
    nickname     text,
    city         integer
        references cities,
    state        integer
        references states,
    year_founded real,
    team_code    text
);

alter table team
    owner to admin;

create table if not exists game_summary
(
    game_date_est                    timestamp,
    game_sequence                    integer,
    game_id                          integer
        references game_info,
    game_status_id                   integer,
    game_status_text                 text,
    gamecode                         text,
    home_team_id                     integer
        references team,
    visitor_team_id                  integer
        references team,
    season                           integer,
    live_period                      integer,
    live_pc_time                     text,
    natl_tv_broadcaster_abbreviation text,
    live_period_time_bcast           text,
    wh_status                        integer
);

alter table game_summary
    owner to admin;

create table if not exists inactive_players
(
    game_id    integer
        references game_info,
    player_id  integer,
    jersey_num text,
    team_id    integer
        references team
);

alter table inactive_players
    owner to admin;

create table if not exists game
(
    season_id            integer,
    team_id_home         integer
        references team,
    game_id              integer
        references game_info,
    matchup_home         text,
    wl_home              text,
    min                  integer,
    fgm_home             real,
    fga_home             real,
    fg_pct_home          real,
    fg3m_home            real,
    fg3a_home            real,
    fg3_pct_home         real,
    ftm_home             real,
    fta_home             real,
    ft_pct_home          real,
    oreb_home            real,
    dreb_home            real,
    reb_home             real,
    ast_home             real,
    stl_home             real,
    blk_home             real,
    tov_home             real,
    pf_home              real,
    pts_home             real,
    plus_minus_home      integer,
    video_available_home integer,
    team_id_away         integer
        references team,
    matchup_away         text,
    wl_away              text,
    fgm_away             real,
    fga_away             real,
    fg_pct_away          real,
    fg3m_away            real,
    fg3a_away            real,
    fg3_pct_away         real,
    ftm_away             real,
    fta_away             real,
    ft_pct_away          real,
    oreb_away            real,
    dreb_away            real,
    reb_away             real,
    ast_away             real,
    stl_away             real,
    blk_away             real,
    tov_away             real,
    pf_away              real,
    pts_away             real,
    plus_minus_away      integer,
    video_available_away integer,
    season_type_id       integer
);

alter table game
    owner to admin;

create table if not exists team_details
(
    team_id            integer
        references team,
    arena              text,
    arenacapacity      real,
    owner              text,
    generalmanager     text,
    headcoach          text,
    dleagueaffiliation text,
    facebook           text,
    instagram          text,
    twitter            text
);

alter table team_details
    owner to admin;

create table if not exists team_history
(
    team_id          integer
        references team,
    year_active_till integer
);

alter table team_history
    owner to admin;

create table if not exists player
(
    id         integer not null
        primary key,
    first_name text,
    last_name  text
);

alter table player
    owner to admin;

create table if not exists play_by_play
(
    game_id              integer,
    eventnum             integer,
    eventmsgtype         integer,
    eventmsgactiontype   integer,
    period               integer,
    wctimestring         text,
    pctimestring         text,
    homedescription      text,
    neutraldescription   text,
    visitordescription   text,
    score                text,
    scoremargin          text,
    person1type          real,
    player1_id           integer
        references player,
    player1_team_id      integer
        references team,
    person2type          real,
    player2_id           integer
        references player,
    player2_team_id      integer
        references team,
    person3type          real,
    player3_id           integer
        references player,
    player3_team_id      integer
        references team,
    video_available_flag text
);

alter table play_by_play
    owner to admin;

create table if not exists draft_combine_stats
(
    season                       integer,
    player_id                    integer
        references player,
    position_id                  integer,
    height_wo_shoes              real,
    height_wo_shoes_ft_in        text,
    height_w_shoes               real,
    height_w_shoes_ft_in         text,
    weight                       text,
    wingspan                     real,
    wingspan_ft_in               text,
    standing_reach               real,
    standing_reach_ft_in         text,
    body_fat_pct                 text,
    hand_length                  text,
    hand_width                   text,
    standing_vertical_leap       real,
    max_vertical_leap            real,
    lane_agility_time            real,
    modified_lane_agility_time   real,
    three_quarter_sprint         real,
    bench_press                  real,
    spot_fifteen_corner_left     text,
    spot_fifteen_break_left      text,
    spot_fifteen_top_key         text,
    spot_fifteen_break_right     text,
    spot_fifteen_corner_right    text,
    spot_college_corner_left     text,
    spot_college_break_left      text,
    spot_college_top_key         text,
    spot_college_break_right     text,
    spot_college_corner_right    text,
    spot_nba_corner_left         text,
    spot_nba_break_left          text,
    spot_nba_top_key             text,
    spot_nba_break_right         text,
    spot_nba_corner_right        text,
    off_drib_fifteen_break_left  text,
    off_drib_fifteen_top_key     text,
    off_drib_fifteen_break_right text,
    off_drib_college_break_left  text,
    off_drib_college_top_key     text,
    off_drib_college_break_right text,
    on_move_fifteen              text,
    on_move_college              text
);

alter table draft_combine_stats
    owner to admin;

create table if not exists common_player_info
(
    person_id                        integer
        references player,
    display_fi_last                  text,
    player_slug                      text,
    birthdate                        timestamp,
    country_id                       integer,
    last_affiliation_id              integer,
    height                           text,
    weight                           text,
    season_exp                       real,
    jersey                           text,
    position_id                      integer,
    rosterstatus                     text,
    games_played_current_season_flag text,
    team_id                          integer
        references team,
    playercode                       text,
    from_year                        real,
    to_year                          real,
    dleague_flag                     text,
    nba_flag                         text,
    games_played_flag                text,
    draft_year                       text,
    draft_round                      text,
    draft_number                     text,
    greatest_75_flag                 text
);

alter table common_player_info
    owner to admin;

create table if not exists player_school
(
    school_id integer,
    person_id integer
        constraint fk_person_id
            references player
);

alter table player_school
    owner to admin;

create table if not exists draft_history
(
    person_id           integer
        references player,
    season              integer,
    round_number        integer,
    round_pick          integer,
    overall_pick        integer,
    draft_id            integer,
    team_id             integer
        references team,
    organization_id     integer,
    player_profile_flag integer
);

alter table draft_history
    owner to admin;

create table if not exists player_active
(
    id       integer
        references player,
    s_active integer
);

alter table player_active
    owner to admin;

create or replace procedure insertar_player_table(IN id_in integer, IN first_name text, IN last_name text, IN is_active integer)
    language plpgsql
as
$$
BEGIN
    -- Verificar si el ID ya existe en la tabla "player"
    IF EXISTS (SELECT 1 FROM player p WHERE p.id = id_in) THEN
        RAISE EXCEPTION 'El ID % ya existe en la tabla player', id_in;
	ELSE
	-- Insertar en la tabla "player"
    INSERT INTO player (id, first_name, last_name) VALUES (id_in, first_name, last_name);

    END IF;

    -- Verificar si el ID ya existe en la tabla "player_active"
    IF EXISTS (SELECT 1 FROM player_active pa WHERE pa.id = id_in) THEN
        RAISE EXCEPTION 'El ID % ya existe en la tabla player_active', id_in;
    ELSE
    -- Insertar en la tabla "player_active"
    INSERT INTO player_active (id, s_active) VALUES (id_in, is_active);
	END IF;




EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, levantar la excepción
        RAISE;
END $$;

alter procedure insertar_player_table(integer, text, text, integer) owner to admin;

create or replace procedure insertar_team_table(IN id_in integer, IN full_name text, IN abbreviation text, IN nickname text, IN city_in text, IN state_in text, IN year_founded real)
    language plpgsql
as
$$
DECLARE
    id_city INT;
    id_state INT;
BEGIN
    -- Verificar si el ID ya existe en la tabla "team"
    IF EXISTS (SELECT 1 FROM team t WHERE t.id = id_in) THEN
        RAISE EXCEPTION 'El ID % ya existe en la tabla team', id_in;
    END IF;

    -- Manejar la ciudad
    SELECT id INTO id_city FROM cities WHERE city = city_in LIMIT 1;
    IF id_city IS NULL THEN
        INSERT INTO cities (city) VALUES (city_in) RETURNING id INTO id_city;
    END IF;

    -- Manejar el estado
    SELECT id INTO id_state FROM states WHERE state = state_in LIMIT 1;
    IF id_state IS NULL THEN
        INSERT INTO states (state) VALUES (state_in) RETURNING id INTO id_state;
    END IF;

    -- Insertar en la tabla "team"
    INSERT INTO team (id, full_name, abbreviation, nickname, city, state, year_founded)
    VALUES (id_in, full_name, abbreviation, nickname, id_city, id_state, year_founded);

EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, deshacer la transacción
        ROLLBACK;
        RAISE;
END $$;

alter procedure insertar_team_table(integer, text, text, text, text, text, real) owner to admin;

create or replace procedure insertar_team_details_table(IN id_in integer, IN abbreviation text, IN nickname text, IN year_founded real, IN city_in text, IN arena text, IN arenacapacity real, IN owner text, IN generalmanager text, IN headcoach text, IN dleagueaffiliation text, IN facebook text, IN instagram text, IN twitter text)
    language plpgsql
as
$$
DECLARE
    id_city INT;
    id_team INT;
BEGIN

    IF EXISTS (SELECT 1 FROM team_details td WHERE td.team_id = id_in) THEN
        RAISE EXCEPTION 'El ID % ya existe en la tabla team_details', id_in;
    END IF;

    -- Manejar la ciudad
    SELECT id INTO id_city FROM cities WHERE city = city_in LIMIT 1;
    IF id_city IS NULL THEN
        INSERT INTO cities (city) VALUES (city_in) RETURNING id INTO id_city;
    END IF;

	SELECT id INTO id_team FROM team WHERE id = id_in LIMIT 1;

	IF id_team IS NULL THEN
        -- Insertar en la tabla "team"
	    INSERT INTO team (id, full_name, abbreviation, nickname, city, state, year_founded)
	    VALUES (id_in, NULL, abbreviation, nickname, id_city, NULL, year_founded);
    END IF;

	insert into team_details (team_id,arena ,arenacapacity,owner,generalmanager,headcoach,dleagueaffiliation,facebook,instagram,twitter)
	values (id_in,arena ,arenacapacity,owner,generalmanager,headcoach,dleagueaffiliation,facebook,instagram,twitter);

EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, deshacer la transacción
        ROLLBACK;
        RAISE;
END $$;

alter procedure insertar_team_details_table(integer, text, text, real, text, text, real, text, text, text, text, text, text, text) owner to admin;

create or replace procedure insertar_draft_history_table(IN person_id integer, IN first_name text, IN last_name text, IN season integer, IN round_number integer, IN round_pick integer, IN overall_pick integer, IN draft_type_in text, IN team_id integer, IN team_city text, IN team_name text, IN team_abbreviation text, IN organization_in text, IN organization_type_in text, IN player_profile_flag integer)
    language plpgsql
as
$$
DECLARE
    id_city INT;
    id_team INT;
    id_organization INT;
    id_organization_type INT;
    id_draft_type INT;
BEGIN
    -- Verificar si el ID ya existe en la tabla "player"

    IF EXISTS (SELECT 1 FROM player p WHERE p.id = person_id) THEN

	ELSE
		-- Insertar en la tabla "player"
	    INSERT INTO player (id, first_name, last_name) VALUES (person_id, first_name, last_name);
    END IF;

	SELECT id INTO id_city FROM cities WHERE city = team_city LIMIT 1;
    IF id_city IS NULL THEN
        INSERT INTO cities (city) VALUES (team_city) RETURNING id INTO id_city;
    END IF;


	SELECT id INTO id_team FROM team WHERE id = team_id LIMIT 1;

	IF id_team IS NULL THEN
        -- Insertar en la tabla "team"
	    INSERT INTO team (id, full_name, abbreviation, nickname, city, state, year_founded)
	    VALUES (team_id, team_name, team_abbreviation, null, id_city, NULL, null);
    END IF;

	select organization_type_id INTO id_organization_type from "Organization_type" ot where ot.organization_type = organization_type_in;

	IF id_organization_type IS NULL THEN
	    insert into "Organization_type" (organization_type )values(organization_type_in) RETURNING organization_type_id INTO id_organization_type;
    END IF;


	select organization_id INTO id_organization from "Organization" o where o.organization = organization_in;

	IF id_organization IS NULL THEN
	    insert into "Organization" (organization,organization_type_id)values(organization_in,id_organization_type ) RETURNING organization_id INTO id_organization;
    END IF;


	select draft_id INTO id_draft_type from "draft" d where d.draft_type = draft_type_in;

	IF id_draft_type IS NULL THEN
	    insert into "draft" (draft_type)values(draft_type_in) RETURNING draft_id INTO id_draft_type;
    END IF;

	insert into draft_history (person_id,season, round_number,round_pick,overall_pick, draft_id,team_id,organization_id ,player_profile_flag)
	values (person_id,season, round_number,round_pick,overall_pick,id_draft_type,team_id,id_organization,player_profile_flag);

EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, levantar la excepción
        RAISE;
END $$;

alter procedure insertar_draft_history_table(integer, text, text, integer, integer, integer, integer, text, integer, text, text, text, text, text, integer) owner to admin;

create or replace procedure insertar_common_player_info(IN p_person_id integer, IN p_first_name text, IN p_last_name text, IN p_display_fi_last text, IN p_player_slug text, IN p_birthdate timestamp without time zone, IN p_school text, IN p_country text, IN p_last_affiliation text, IN p_height text, IN p_weight text, IN p_season_exp double precision, IN p_jersey text, IN p_position text, IN p_rosterstatus text, IN p_games_played_current_season_flag text, IN p_team_id integer, IN p_team_name text, IN p_team_abbreviation text, IN p_team_code text, IN p_team_city text, IN p_playercode text, IN p_from_year double precision, IN p_to_year double precision, IN p_dleague_flag text, IN p_nba_flag text, IN p_games_played_flag text, IN p_draft_year text, IN p_draft_round text, IN p_draft_number text, IN p_greatest_75_flag text)
    language plpgsql
as
$$
DECLARE
    v_country_id INT;
    v_last_affiliation_id INT;
    v_position_id INT;
    v_city_id INT;
    v_school_id INT;
BEGIN
    -- Insertar en player si no existe
    IF NOT EXISTS (SELECT 1 FROM player WHERE id = p_person_id) THEN
        INSERT INTO player (id, first_name, last_name)
        VALUES (p_person_id, p_first_name, p_last_name);
    END IF;

    -- Insertar o recuperar city_id
    SELECT id INTO v_city_id FROM cities WHERE city = p_team_city;
    IF v_city_id IS NULL THEN
        INSERT INTO cities (city) VALUES (p_team_city) RETURNING id INTO v_city_id;
    END IF;

    -- Insertar o actualizar team
    IF EXISTS (SELECT 1 FROM team WHERE id = p_team_id) THEN
        UPDATE team SET
            team_code = COALESCE(team_code, p_team_code),
            full_name = COALESCE(full_name, p_team_name),
            abbreviation = COALESCE(abbreviation, p_team_abbreviation),
            city = COALESCE(city, v_city_id)
        WHERE id = p_team_id;
    ELSE
        INSERT INTO team (id, full_name, abbreviation, nickname, city, state, year_founded, team_code)
        VALUES (p_team_id, p_team_name, p_team_abbreviation, NULL, v_city_id, NULL, NULL, p_team_code);
    END IF;

    -- Insertar o recuperar last_affiliation_id
    SELECT last_affiliation_id INTO v_last_affiliation_id FROM last_affiliation WHERE last_affiliation = p_last_affiliation;
    IF v_last_affiliation_id IS NULL THEN
        INSERT INTO last_affiliation (last_affiliation) VALUES (p_last_affiliation)
        RETURNING last_affiliation_id INTO v_last_affiliation_id;
    END IF;

    -- Insertar o recuperar country_id
    SELECT country_id INTO v_country_id FROM country WHERE country = p_country;
    IF v_country_id IS NULL THEN
        INSERT INTO country (country) VALUES (p_country)
        RETURNING country_id INTO v_country_id;
    END IF;

    -- Insertar o recuperar position_id
    SELECT position_id INTO v_position_id FROM position WHERE position = p_position;
    IF v_position_id IS NULL THEN
        INSERT INTO position (position) VALUES (p_position)
        RETURNING position_id INTO v_position_id;
    END IF;

    -- Insertar o recuperar school_id
    SELECT school_id INTO v_school_id FROM school WHERE school = p_school;
    IF v_school_id IS NULL THEN
        INSERT INTO school (school) VALUES (p_school)
        RETURNING school_id INTO v_school_id;
    END IF;

    -- Insertar en player_school
    IF NOT EXISTS (
        SELECT 1 FROM player_school WHERE person_id = p_person_id AND school_id = v_school_id
    ) THEN
        INSERT INTO player_school (person_id, school_id)
        VALUES (p_person_id, v_school_id);
    END IF;

    -- Insertar en common_player_info
    INSERT INTO common_player_info (
        person_id,
        display_fi_last,
        player_slug,
        birthdate,
        country_id,
        last_affiliation_id,
        height,
        weight,
        season_exp,
        jersey,
        position_id,
        rosterstatus,
        games_played_current_season_flag,
        team_id,
        playercode,
        from_year,
        to_year,
        dleague_flag,
        nba_flag,
        games_played_flag,
        draft_year,
        draft_round,
        draft_number,
        greatest_75_flag
    )
    VALUES (
        p_person_id,
        p_display_fi_last,
        p_player_slug,
        p_birthdate,
        v_country_id,
        v_last_affiliation_id,
        p_height,
        p_weight,
        p_season_exp,
        p_jersey,
        v_position_id,
        p_rosterstatus,
        p_games_played_current_season_flag,
        p_team_id,
        p_playercode,
        p_from_year,
        p_to_year,
        p_dleague_flag,
        p_nba_flag,
        p_games_played_flag,
        p_draft_year,
        p_draft_round,
        p_draft_number,
        p_greatest_75_flag
    );
END;
$$;

alter procedure insertar_common_player_info(integer, text, text, text, text, timestamp, text, text, text, text, text, double precision, text, text, text, text, integer, text, text, text, text, text, double precision, double precision, text, text, text, text, text, text, text) owner to admin;

create or replace procedure insertar_draft_combine_stats(IN in_season text, IN in_player_id text, IN in_first_name text, IN in_last_name text, IN in_position text, IN in_height_wo_shoes real, IN in_height_wo_shoes_ft_in text, IN in_height_w_shoes real, IN in_height_w_shoes_ft_in text, IN in_weight text, IN in_wingspan real, IN in_wingspan_ft_in text, IN in_standing_reach real, IN in_standing_reach_ft_in text, IN in_body_fat_pct text, IN in_hand_length text, IN in_hand_width text, IN in_standing_vertical_leap real, IN in_max_vertical_leap real, IN in_lane_agility_time real, IN in_modified_lane_agility_time real, IN in_three_quarter_sprint real, IN in_bench_press real, IN in_spot_fifteen_corner_left text, IN in_spot_fifteen_break_left text, IN in_spot_fifteen_top_key text, IN in_spot_fifteen_break_right text, IN in_spot_fifteen_corner_right text, IN in_spot_college_corner_left text, IN in_spot_college_break_left text, IN in_spot_college_top_key text, IN in_spot_college_break_right text, IN in_spot_college_corner_right text, IN in_spot_nba_corner_left text, IN in_spot_nba_break_left text, IN in_spot_nba_top_key text, IN in_spot_nba_break_right text, IN in_spot_nba_corner_right text, IN in_off_drib_fifteen_break_left text, IN in_off_drib_fifteen_top_key text, IN in_off_drib_fifteen_break_right text, IN in_off_drib_college_break_left text, IN in_off_drib_college_top_key text, IN in_off_drib_college_break_right text, IN in_on_move_fifteen text, IN in_on_move_college text)
    language plpgsql
as
$$
DECLARE
    int_player_id INT := in_player_id::INT;
    int_season INT := in_season::INT;
    int_position_id INT;
BEGIN
    -- Insertar jugador si no existe
    IF NOT EXISTS (SELECT 1 FROM player WHERE id = int_player_id) THEN
        INSERT INTO player(id, first_name, last_name)
        VALUES (int_player_id, in_first_name, in_last_name);
    END IF;

    -- Insertar posición si no existe
    SELECT position_id INTO int_position_id FROM "position" WHERE "position" = in_position;
    IF int_position_id IS NULL THEN
        INSERT INTO "position"("position") VALUES (in_position) RETURNING position_id INTO int_position_id;
    END IF;

    -- Insertar en draft_combine_stats
    INSERT INTO draft_combine_stats(
        season,
        player_id,
        position_id,
        height_wo_shoes,
        height_wo_shoes_ft_in,
        height_w_shoes,
        height_w_shoes_ft_in,
        weight,
        wingspan,
        wingspan_ft_in,
        standing_reach,
        standing_reach_ft_in,
        body_fat_pct,
        hand_length,
        hand_width,
        standing_vertical_leap,
        max_vertical_leap,
        lane_agility_time,
        modified_lane_agility_time,
        three_quarter_sprint,
        bench_press,
        spot_fifteen_corner_left,
        spot_fifteen_break_left,
        spot_fifteen_top_key,
        spot_fifteen_break_right,
        spot_fifteen_corner_right,
        spot_college_corner_left,
        spot_college_break_left,
        spot_college_top_key,
        spot_college_break_right,
        spot_college_corner_right,
        spot_nba_corner_left,
        spot_nba_break_left,
        spot_nba_top_key,
        spot_nba_break_right,
        spot_nba_corner_right,
        off_drib_fifteen_break_left,
        off_drib_fifteen_top_key,
        off_drib_fifteen_break_right,
        off_drib_college_break_left,
        off_drib_college_top_key,
        off_drib_college_break_right,
        on_move_fifteen,
        on_move_college
    ) VALUES (
        int_season,
        int_player_id,
        int_position_id,
        in_height_wo_shoes,
        in_height_wo_shoes_ft_in,
        in_height_w_shoes,
        in_height_w_shoes_ft_in,
        in_weight,
        in_wingspan,
        in_wingspan_ft_in,
        in_standing_reach,
        in_standing_reach_ft_in,
        in_body_fat_pct,
        in_hand_length,
        in_hand_width,
        in_standing_vertical_leap,
        in_max_vertical_leap,
        in_lane_agility_time,
        in_modified_lane_agility_time,
        in_three_quarter_sprint,
        in_bench_press,
        in_spot_fifteen_corner_left,
        in_spot_fifteen_break_left,
        in_spot_fifteen_top_key,
        in_spot_fifteen_break_right,
        in_spot_fifteen_corner_right,
        in_spot_college_corner_left,
        in_spot_college_break_left,
        in_spot_college_top_key,
        in_spot_college_break_right,
        in_spot_college_corner_right,
        in_spot_nba_corner_left,
        in_spot_nba_break_left,
        in_spot_nba_top_key,
        in_spot_nba_break_right,
        in_spot_nba_corner_right,
        in_off_drib_fifteen_break_left,
        in_off_drib_fifteen_top_key,
        in_off_drib_fifteen_break_right,
        in_off_drib_college_break_left,
        in_off_drib_college_top_key,
        in_off_drib_college_break_right,
        in_on_move_fifteen,
        in_on_move_college
    );
END;
$$;

alter procedure insertar_draft_combine_stats(text, text, text, text, text, real, text, real, text, text, real, text, real, text, text, text, text, real, real, real, real, real, real, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text, text) owner to admin;

create or replace procedure insertar_game_info_detalle(IN in_game_id text, IN in_game_date timestamp without time zone, IN in_attendance integer, IN in_game_time text)
    language plpgsql
as
$$
DECLARE
    int_game_id INT;
BEGIN
    -- Verificar si el game_id ya existe en la tabla relacional
    SELECT game_id INTO int_game_id FROM public.game_info WHERE game_id = in_game_id::INT;

    -- Si no existe, lo insertamos
    IF int_game_id IS NULL THEN
        INSERT INTO public.game_info (game_id)
        VALUES (in_game_id::INT)
        RETURNING game_id INTO int_game_id;
    END IF;

    -- Insertar en game_date (ignorar duplicados)
    IF NOT EXISTS (
        SELECT 1 FROM public.game_date
        WHERE game_id = int_game_id AND game_date = in_game_date
    ) THEN
        INSERT INTO public.game_date (game_id, game_date)
        VALUES (int_game_id, in_game_date);
    END IF;

    -- Insertar en game_attendance (ignorar duplicados)
    IF NOT EXISTS (
        SELECT 1 FROM public.game_attendance
        WHERE game_id = int_game_id AND attendance = in_attendance AND game_time = in_game_time
    ) THEN
        INSERT INTO public.game_attendance (game_id, attendance, game_time)
        VALUES (int_game_id, in_attendance, in_game_time);
    END IF;
END;
$$;

alter procedure insertar_game_info_detalle(text, timestamp, integer, text) owner to admin;

create or replace procedure insertar_arbitro_por_partido(IN in_game_id text, IN in_first_name text, IN in_last_name text, IN in_jersey_num text)
    language plpgsql
as
$$
DECLARE
    int_game_id INT := in_game_id::INT;
    arbitro_id INT;
BEGIN
    -- Insertar árbitro si no existe
    SELECT official_id INTO arbitro_id
    FROM public.officials
    WHERE first_name = in_first_name
      AND last_name = in_last_name
      AND jersey_num = in_jersey_num;

    IF arbitro_id IS NULL THEN
        INSERT INTO public.officials(first_name, last_name, jersey_num)
        VALUES (in_first_name, in_last_name, in_jersey_num)
        RETURNING official_id INTO arbitro_id;
    END IF;

    -- Insertar game_id en game_info si no existe
    IF NOT EXISTS (SELECT 1 FROM public.game_info WHERE game_id = int_game_id) THEN
        INSERT INTO public.game_info(game_id)
        VALUES (int_game_id);
    END IF;

    -- Insertar relación en official_of_game si no existe
    IF NOT EXISTS (
        SELECT 1 FROM public.official_of_game
        WHERE game_id = int_game_id AND official_id = arbitro_id
    ) THEN
        INSERT INTO public.official_of_game(game_id, official_id)
        VALUES (int_game_id, arbitro_id);
    END IF;
END;
$$;

alter procedure insertar_arbitro_por_partido(text, text, text, text) owner to admin;

create or replace procedure insertar_inactive_player(IN in_game_id text, IN in_player_id text, IN in_first_name text, IN in_last_name text, IN in_jersey_num text, IN in_team_id text, IN in_team_city text, IN in_team_name text, IN in_team_abbreviation text)
    language plpgsql
as
$$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_team_id INT := in_team_id::INT;
    int_player_id INT := in_player_id::INT;
    city_id INT;
BEGIN
    -- Insertar en cities si no existe
    IF in_team_city IS NOT NULL THEN
        SELECT id INTO city_id FROM public.cities WHERE city = in_team_city;
        IF city_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city)
            RETURNING id INTO city_id;
        END IF;
    END IF;

    -- Insertar en team si no existe
    IF int_team_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_team_id
    ) THEN
        INSERT INTO public.team(id, full_name, abbreviation, nickname, city, state, year_founded, team_code)
        VALUES (
            int_team_id,
            in_team_name,
            in_team_abbreviation,
            NULL,
            city_id,
            NULL,
            NULL,
            NULL
        );
    END IF;

    -- Insertar en game_info si no existe
    IF int_game_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.game_info WHERE game_id = int_game_id
    ) THEN
        INSERT INTO public.game_info(game_id)
        VALUES (int_game_id);
    END IF;

    -- Insertar en player si no existe
    IF int_player_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.player WHERE id = int_player_id
    ) THEN
        INSERT INTO public.player(id, first_name, last_name)
        VALUES (
            int_player_id,
            in_first_name,
            in_last_name
        );
    END IF;

    -- Insertar en inactive_players
    INSERT INTO public.inactive_players(game_id, player_id, jersey_num, team_id)
    VALUES (
        int_game_id,
        int_player_id,
        in_jersey_num,
        int_team_id
    );
END;
$$;

alter procedure insertar_inactive_player(text, text, text, text, text, text, text, text, text) owner to admin;

create or replace procedure insertar_game_summary(IN in_game_date_est timestamp without time zone, IN in_game_sequence integer, IN in_game_id text, IN in_game_status_id integer, IN in_game_status_text text, IN in_gamecode text, IN in_home_team_id text, IN in_visitor_team_id text, IN in_season text, IN in_live_period integer, IN in_live_pc_time text, IN in_nat_tv_broadcaster_abbreviation text, IN in_live_period_time_bcast text, IN in_wh_status integer)
    language plpgsql
as
$$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_home_team_id INT := in_home_team_id::INT;
    int_visitor_team_id INT := in_visitor_team_id::INT;
    int_season INT := in_season::INT;
BEGIN
    -- Insertar home_team_id si no existe
    IF int_home_team_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_home_team_id
    ) THEN
        INSERT INTO public.team(id, full_name, abbreviation, nickname, city, state, year_founded)
        VALUES (int_home_team_id, NULL, NULL, NULL, NULL, NULL, NULL);
    END IF;

    -- Insertar visitor_team_id si no existe
    IF int_visitor_team_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_visitor_team_id
    ) THEN
        INSERT INTO public.team(id, full_name, abbreviation, nickname, city, state, year_founded)
        VALUES (int_visitor_team_id, NULL, NULL, NULL, NULL, NULL, NULL);
    END IF;

    -- Insertar en game_info si no existe
    IF int_game_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.game_info WHERE game_id = int_game_id
    ) THEN
        INSERT INTO public.game_info(game_id)
        VALUES (int_game_id);
    END IF;

    -- Insertar en game_summary
    INSERT INTO public.game_summary(
        game_date_est,
        game_sequence,
        game_id,
        game_status_id,
        game_status_text,
        gamecode,
        home_team_id,
        visitor_team_id,
        season,
        live_period,
        live_pc_time,
        natl_tv_broadcaster_abbreviation,
        live_period_time_bcast,
        wh_status
    ) VALUES (
        in_game_date_est,
        in_game_sequence,
        int_game_id,
        in_game_status_id,
        in_game_status_text,
        in_gamecode,
        int_home_team_id,
        int_visitor_team_id,
        int_season,
        in_live_period,
        in_live_pc_time,
        in_nat_tv_broadcaster_abbreviation,
        in_live_period_time_bcast,
        in_wh_status
    );
END;
$$;

alter procedure insertar_game_summary(timestamp, integer, text, integer, text, text, text, text, text, integer, text, text, text, integer) owner to admin;

create or replace procedure insertar_other_stats(IN in_game_id text, IN in_league_id text, IN in_team_id_home text, IN in_team_abbreviation_home text, IN in_team_city_home text, IN in_pts_paint_home integer, IN in_pts_2nd_chance_home integer, IN in_pts_fb_home integer, IN in_largest_lead_home integer, IN in_lead_changes integer, IN in_times_tied integer, IN in_team_turnovers_home integer, IN in_total_turnovers_home integer, IN in_team_rebounds_home integer, IN in_pts_off_to_home integer, IN in_team_id_away text, IN in_team_abbreviation_away text, IN in_team_city_away text, IN in_pts_paint_away integer, IN in_pts_2nd_chance_away integer, IN in_pts_fb_away integer, IN in_largest_lead_away integer, IN in_team_turnovers_away integer, IN in_total_turnovers_away integer, IN in_team_rebounds_away integer, IN in_pts_off_to_away integer)
    language plpgsql
as
$$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_team_id_home INT := in_team_id_home::INT;
    int_team_id_away INT := in_team_id_away::INT;
    city_home_id INT;
    city_away_id INT;
BEGIN
    -- Insertar game_info si no existe
    IF NOT EXISTS (SELECT 1 FROM public.game_info WHERE game_id = int_game_id) THEN
        INSERT INTO public.game_info(game_id) VALUES (int_game_id);
    END IF;

    -- Insertar ciudades si no existen
    IF in_team_city_home IS NOT NULL THEN
        SELECT id INTO city_home_id FROM public.cities WHERE city = in_team_city_home;
        IF city_home_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_home) RETURNING id INTO city_home_id;
        END IF;
    END IF;

    IF in_team_city_away IS NOT NULL THEN
        SELECT id INTO city_away_id FROM public.cities WHERE city = in_team_city_away;
        IF city_away_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_away) RETURNING id INTO city_away_id;
        END IF;
    END IF;

    -- Insertar equipos si no existen
    IF int_team_id_home IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_team_id_home
    ) THEN
        INSERT INTO public.team(id, abbreviation, city) VALUES (
            int_team_id_home,
            in_team_abbreviation_home,
            city_home_id
        );
    END IF;

    IF int_team_id_away IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_team_id_away
    ) THEN
        INSERT INTO public.team(id, abbreviation, city) VALUES (
            int_team_id_away,
            in_team_abbreviation_away,
            city_away_id
        );
    END IF;

    -- Insertar en other_stats
    INSERT INTO public.other_stats(
        game_id, league_id, team_id_home, pts_paint_home, pts_2nd_chance_home, pts_fb_home,
        largest_lead_home, lead_changes, times_tied, team_turnovers_home, total_turnovers_home,
        team_rebounds_home, pts_off_to_home, team_id_away, pts_paint_away, pts_2nd_chance_away,
        pts_fb_away, largest_lead_away, team_turnovers_away, total_turnovers_away,
        team_rebounds_away, pts_off_to_away
    )
    VALUES (
        int_game_id, NULLIF(in_league_id, '')::INT, int_team_id_home, in_pts_paint_home,
        in_pts_2nd_chance_home, in_pts_fb_home, in_largest_lead_home, in_lead_changes, in_times_tied,
        in_team_turnovers_home, in_total_turnovers_home, in_team_rebounds_home, in_pts_off_to_home,
        int_team_id_away, in_pts_paint_away, in_pts_2nd_chance_away, in_pts_fb_away,
        in_largest_lead_away, in_team_turnovers_away, in_total_turnovers_away,
        in_team_rebounds_away, in_pts_off_to_away
    );
END;
$$;

alter procedure insertar_other_stats(text, text, text, text, text, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, text, text, text, integer, integer, integer, integer, integer, integer, integer, integer) owner to admin;

create or replace procedure insertar_other_stats(IN in_game_id text, IN in_league_id integer, IN in_team_id_home text, IN in_team_abbreviation_home text, IN in_team_city_home text, IN in_pts_paint_home integer, IN in_pts_2nd_chance_home integer, IN in_pts_fb_home integer, IN in_largest_lead_home integer, IN in_lead_changes integer, IN in_times_tied integer, IN in_team_turnovers_home integer, IN in_total_turnovers_home integer, IN in_team_rebounds_home integer, IN in_pts_off_to_home integer, IN in_team_id_away text, IN in_team_abbreviation_away text, IN in_team_city_away text, IN in_pts_paint_away integer, IN in_pts_2nd_chance_away integer, IN in_pts_fb_away integer, IN in_largest_lead_away integer, IN in_team_turnovers_away integer, IN in_total_turnovers_away integer, IN in_team_rebounds_away integer, IN in_pts_off_to_away integer)
    language plpgsql
as
$$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_team_id_home INT := in_team_id_home::INT;
    int_team_id_away INT := in_team_id_away::INT;
    city_home_id INT;
    city_away_id INT;
BEGIN
    -- Insertar game_info si no existe
    IF NOT EXISTS (SELECT 1 FROM public.game_info WHERE game_id = int_game_id) THEN
        INSERT INTO public.game_info(game_id) VALUES (int_game_id);
    END IF;

    -- Insertar ciudades si no existen
    IF in_team_city_home IS NOT NULL THEN
        SELECT id INTO city_home_id FROM public.cities WHERE city = in_team_city_home;
        IF city_home_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_home) RETURNING id INTO city_home_id;
        END IF;
    END IF;

    IF in_team_city_away IS NOT NULL THEN
        SELECT id INTO city_away_id FROM public.cities WHERE city = in_team_city_away;
        IF city_away_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_away) RETURNING id INTO city_away_id;
        END IF;
    END IF;

    -- Insertar equipos si no existen
    IF int_team_id_home IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_team_id_home
    ) THEN
        INSERT INTO public.team(id, abbreviation, city) VALUES (
            int_team_id_home,
            in_team_abbreviation_home,
            city_home_id
        );
    END IF;

    IF int_team_id_away IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.team WHERE id = int_team_id_away
    ) THEN
        INSERT INTO public.team(id, abbreviation, city) VALUES (
            int_team_id_away,
            in_team_abbreviation_away,
            city_away_id
        );
    END IF;

    -- Insertar en other_stats
    INSERT INTO public.other_stats(
        game_id, league_id, team_id_home, pts_paint_home, pts_2nd_chance_home, pts_fb_home,
        largest_lead_home, lead_changes, times_tied, team_turnovers_home, total_turnovers_home,
        team_rebounds_home, pts_off_to_home, team_id_away, pts_paint_away, pts_2nd_chance_away,
        pts_fb_away, largest_lead_away, team_turnovers_away, total_turnovers_away,
        team_rebounds_away, pts_off_to_away
    )
    VALUES (
        int_game_id, NULLIF(in_league_id, '')::INT, int_team_id_home, in_pts_paint_home,
        in_pts_2nd_chance_home, in_pts_fb_home, in_largest_lead_home, in_lead_changes, in_times_tied,
        in_team_turnovers_home, in_total_turnovers_home, in_team_rebounds_home, in_pts_off_to_home,
        int_team_id_away, in_pts_paint_away, in_pts_2nd_chance_away, in_pts_fb_away,
        in_largest_lead_away, in_team_turnovers_away, in_total_turnovers_away,
        in_team_rebounds_away, in_pts_off_to_away
    );
END;
$$;

alter procedure insertar_other_stats(text, integer, text, text, text, integer, integer, integer, integer, integer, integer, integer, integer, integer, integer, text, text, text, integer, integer, integer, integer, integer, integer, integer, integer) owner to admin;

CREATE OR REPLACE PROCEDURE insertar_play_by_play(
    in_game_id TEXT,
    in_eventnum INTEGER,
    in_eventmsgtype INTEGER,
    in_eventmsgactiontype INTEGER,
    in_period INTEGER,
    in_wctimestring TEXT,
    in_pctimestring TEXT,
    in_homedescription TEXT,
    in_neutraldescription TEXT,
    in_visitordescription TEXT,
    in_score TEXT,
    in_scoremargin TEXT,
    in_player1_id TEXT,
    in_player1_name TEXT,
    in_player1_team_id INTEGER,
    in_player1_team_city TEXT,
    in_player1_team_abbreviation TEXT,
    in_player2_id TEXT,
    in_player2_name TEXT,
    in_player2_team_id INTEGER,
    in_player2_team_city TEXT,
    in_player2_team_abbreviation TEXT,
    in_player3_id TEXT,
    in_player3_name TEXT,
    in_player3_team_id INTEGER,
    in_player3_team_city TEXT,
    in_player3_team_abbreviation TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_player1_id INT := in_player1_id::INT;
    int_player2_id INT := in_player2_id::INT;
    int_player3_id INT := in_player3_id::INT;
    int_team1_id INT := in_player1_team_id::INT;
    int_team2_id INT := in_player2_team_id::INT;
    int_team3_id INT := in_player3_team_id::INT;
    city_id1 INT;
    city_id2 INT;
    city_id3 INT;
    f_name TEXT;
    l_name TEXT;
BEGIN
    -- Insertar game_info
    IF NOT EXISTS (SELECT 1 FROM public.game_info WHERE game_id = int_game_id) THEN
        INSERT INTO public.game_info(game_id) VALUES (int_game_id);
    END IF;

    -- Insertar ciudades y equipos asociados
    IF in_player1_team_city IS NOT NULL THEN
        SELECT id INTO city_id1 FROM public.cities WHERE city = in_player1_team_city;
        IF city_id1 IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_player1_team_city)
            RETURNING id INTO city_id1;
        END IF;
        IF int_team1_id IS NOT NULL AND NOT EXISTS (
            SELECT 1 FROM public.team WHERE id = int_team1_id
        ) THEN
            INSERT INTO public.team(id, abbreviation, city)
            VALUES (int_team1_id, in_player1_team_abbreviation, city_id1);
        END IF;
    END IF;

    IF in_player2_team_city IS NOT NULL THEN
        SELECT id INTO city_id2 FROM public.cities WHERE city = in_player2_team_city;
        IF city_id2 IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_player2_team_city)
            RETURNING id INTO city_id2;
        END IF;
        IF int_team2_id IS NOT NULL AND NOT EXISTS (
            SELECT 1 FROM public.team WHERE id = int_team2_id
        ) THEN
            INSERT INTO public.team(id, abbreviation, city)
            VALUES (int_team2_id, in_player2_team_abbreviation, city_id2);
        END IF;
    END IF;

    IF in_player3_team_city IS NOT NULL THEN
        SELECT id INTO city_id3 FROM public.cities WHERE city = in_player3_team_city;
        IF city_id3 IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_player3_team_city)
            RETURNING id INTO city_id3;
        END IF;
        IF int_team3_id IS NOT NULL AND NOT EXISTS (
            SELECT 1 FROM public.team WHERE id = int_team3_id
        ) THEN
            INSERT INTO public.team(id, abbreviation, city)
            VALUES (int_team3_id, in_player3_team_abbreviation, city_id3);
        END IF;
    END IF;

    -- Insertar jugador 1
    IF int_player1_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.player WHERE id = int_player1_id
    ) THEN
        f_name := SPLIT_PART(in_player1_name, ' ', 1);
        l_name := CASE WHEN in_player1_name LIKE '% %' THEN SPLIT_PART(in_player1_name, ' ', 2) ELSE NULL END;
        INSERT INTO public.player(id, first_name, last_name)
        VALUES (int_player1_id, f_name, l_name);
    END IF;

    -- Insertar jugador 2
    IF int_player2_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.player WHERE id = int_player2_id
    ) THEN
        f_name := SPLIT_PART(in_player2_name, ' ', 1);
        l_name := CASE WHEN in_player2_name LIKE '% %' THEN SPLIT_PART(in_player2_name, ' ', 2) ELSE NULL END;
        INSERT INTO public.player(id, first_name, last_name)
        VALUES (int_player2_id, f_name, l_name);
    END IF;

    -- Insertar jugador 3
    IF int_player3_id IS NOT NULL AND NOT EXISTS (
        SELECT 1 FROM public.player WHERE id = int_player3_id
    ) THEN
        f_name := SPLIT_PART(in_player3_name, ' ', 1);
        l_name := CASE WHEN in_player3_name LIKE '% %' THEN SPLIT_PART(in_player3_name, ' ', 2) ELSE NULL END;
        INSERT INTO public.player(id, first_name, last_name)
        VALUES (int_player3_id, f_name, l_name);
    END IF;

    -- Insertar en play_by_play
    INSERT INTO public.play_by_play(
        game_id, eventnum, eventmsgtype, eventmsgactiontype, period,
        wctimestring, pctimestring, homedescription, neutraldescription, visitordescription,
        score, scoremargin,
        player1_id, player1_team_id,
        player2_id, player2_team_id,
        player3_id, player3_team_id
    ) VALUES (
        int_game_id, in_eventnum, in_eventmsgtype, in_eventmsgactiontype, in_period,
        in_wctimestring, in_pctimestring, in_homedescription, in_neutraldescription, in_visitordescription,
        in_score, in_scoremargin,
        int_player1_id, int_team1_id,
        int_player2_id, int_team2_id,
        int_player3_id, int_team3_id
    );
END;
$$;


CREATE OR REPLACE PROCEDURE insertar_line_score(
    in_game_id TEXT,
    in_game_sequence INTEGER,
    in_team_id_home TEXT,
    in_team_abbreviation_home TEXT,
    in_team_city_name_home TEXT,
    in_team_nickname_home TEXT,
    in_team_wins_losses_home TEXT,
    in_pts_qtr1_home TEXT,
    in_pts_qtr2_home TEXT,
    in_pts_qtr3_home TEXT,
    in_pts_qtr4_home TEXT,
    in_pts_ot1_home TEXT,
    in_pts_ot2_home TEXT,
    in_pts_ot3_home TEXT,
    in_pts_ot4_home TEXT,
    in_pts_ot5_home TEXT,
    in_pts_ot6_home TEXT,
    in_pts_ot7_home TEXT,
    in_pts_ot8_home TEXT,
    in_pts_ot9_home TEXT,
    in_pts_ot10_home TEXT,
    in_pts_home TEXT,
    in_team_id_away TEXT,
    in_team_abbreviation_away TEXT,
    in_team_city_name_away TEXT,
    in_team_nickname_away TEXT,
    in_team_wins_losses_away TEXT,
    in_pts_qtr1_away TEXT,
    in_pts_qtr2_away TEXT,
    in_pts_qtr3_away TEXT,
    in_pts_qtr4_away TEXT,
    in_pts_ot1_away TEXT,
    in_pts_ot2_away TEXT,
    in_pts_ot3_away TEXT,
    in_pts_ot4_away TEXT,
    in_pts_ot5_away TEXT,
    in_pts_ot6_away TEXT,
    in_pts_ot7_away TEXT,
    in_pts_ot8_away TEXT,
    in_pts_ot9_away TEXT,
    in_pts_ot10_away TEXT,
    in_pts_away TEXT
)
LANGUAGE plpgsql AS $$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_game_seq INT := in_game_sequence::INT;
    int_team_home INT := in_team_id_home::INT;
    int_team_away INT := in_team_id_away::INT;
    home_city_id INT;
    away_city_id INT;
BEGIN
    -- Insertar game_info si no existe
    IF NOT EXISTS (SELECT 1 FROM public.game_info WHERE game_id = int_game_id) THEN
        INSERT INTO public.game_info(game_id) VALUES (int_game_id);
    END IF;

    -- Insertar ciudad y team_home si no existe
    IF in_team_city_name_home IS NOT NULL THEN
        SELECT id INTO home_city_id FROM public.cities WHERE city = in_team_city_name_home;
        IF home_city_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_name_home)
            RETURNING id INTO home_city_id;
        END IF;

        IF NOT EXISTS (SELECT 1 FROM public.team WHERE id = int_team_home) THEN
            INSERT INTO public.team(id, abbreviation, nickname, city)
            VALUES (int_team_home, in_team_abbreviation_home, in_team_nickname_home, home_city_id);
        END IF;
    END IF;

    -- Insertar ciudad y team_away si no existe
    IF in_team_city_name_away IS NOT NULL THEN
        SELECT id INTO away_city_id FROM public.cities WHERE city = in_team_city_name_away;
        IF away_city_id IS NULL THEN
            INSERT INTO public.cities(city) VALUES (in_team_city_name_away)
            RETURNING id INTO away_city_id;
        END IF;

        IF NOT EXISTS (SELECT 1 FROM public.team WHERE id = int_team_away) THEN
            INSERT INTO public.team(id, abbreviation, nickname, city)
            VALUES (int_team_away, in_team_abbreviation_away, in_team_nickname_away, away_city_id);
        END IF;
    END IF;

    -- Insertar en line_score
    INSERT INTO public.line_score(
        game_sequence, game_id,
        team_id_home, team_wins_losses_home,
        pts_qtr1_home, pts_qtr2_home, pts_qtr3_home, pts_qtr4_home,
        pts_ot1_home, pts_ot2_home, pts_ot3_home, pts_ot4_home,
        pts_ot5_home, pts_ot6_home, pts_ot7_home, pts_ot8_home,
        pts_ot9_home, pts_ot10_home, pts_home,
        team_id_away, team_wins_losses_away,
        pts_qtr1_away, pts_qtr2_away, pts_qtr3_away, pts_qtr4_away,
        pts_ot1_away, pts_ot2_away, pts_ot3_away, pts_ot4_away,
        pts_ot5_away, pts_ot6_away, pts_ot7_away, pts_ot8_away,
        pts_ot9_away, pts_ot10_away, pts_away
    )
    VALUES (
        int_game_seq, int_game_id,
        int_team_home, in_team_wins_losses_home,
        in_pts_qtr1_home::INT, in_pts_qtr2_home::INT, in_pts_qtr3_home::INT, in_pts_qtr4_home::INT,
        in_pts_ot1_home::INT, in_pts_ot2_home::INT, in_pts_ot3_home::INT, in_pts_ot4_home::INT,
        in_pts_ot5_home::INT, in_pts_ot6_home::INT, in_pts_ot7_home::INT, in_pts_ot8_home::INT,
        in_pts_ot9_home::INT, in_pts_ot10_home::INT, in_pts_home::FLOAT,
        int_team_away, in_team_wins_losses_away,
        in_pts_qtr1_away::INT, in_pts_qtr2_away::INT, in_pts_qtr3_away::INT, in_pts_qtr4_away::INT,
        in_pts_ot1_away::INT, in_pts_ot2_away::INT, in_pts_ot3_away::INT, in_pts_ot4_away::INT,
        in_pts_ot5_away::INT, in_pts_ot6_away::INT, in_pts_ot7_away::INT, in_pts_ot8_away::INT,
        in_pts_ot9_away::INT, in_pts_ot10_away::INT, in_pts_away::FLOAT
    );
END;
$$;

CREATE OR REPLACE PROCEDURE insertar_juego(
    IN in_game_id TEXT,
    IN in_team_id_home TEXT,
    IN in_team_abbreviation_home TEXT,
    IN in_team_name_home TEXT,
    IN in_team_id_away TEXT,
    IN in_team_abbreviation_away TEXT,
    IN in_team_name_away TEXT,
    IN in_season_id TEXT,
    IN in_game_date TIMESTAMP,
    IN in_matchup_home TEXT,
    IN in_wl_home TEXT,
    IN in_min INT,
    IN in_fgm_home REAL,
    IN in_fga_home REAL,
    IN in_fg_pct_home REAL,
    IN in_fg3m_home REAL,
    IN in_fg3a_home REAL,
    IN in_fg3_pct_home REAL,
    IN in_ftm_home REAL,
    IN in_fta_home REAL,
    IN in_ft_pct_home REAL,
    IN in_oreb_home REAL,
    IN in_dreb_home REAL,
    IN in_reb_home REAL,
    IN in_ast_home REAL,
    IN in_stl_home REAL,
    IN in_blk_home REAL,
    IN in_tov_home REAL,
    IN in_pf_home REAL,
    IN in_pts_home REAL,
    IN in_plus_minus_home INT,
    IN in_video_available_home INT,
    IN in_matchup_away TEXT,
    IN in_wl_away TEXT,
    IN in_fgm_away REAL,
    IN in_fga_away REAL,
    IN in_fg_pct_away REAL,
    IN in_fg3m_away REAL,
    IN in_fg3a_away REAL,
    IN in_fg3_pct_away REAL,
    IN in_ftm_away REAL,
    IN in_fta_away REAL,
    IN in_ft_pct_away REAL,
    IN in_oreb_away REAL,
    IN in_dreb_away REAL,
    IN in_reb_away REAL,
    IN in_ast_away REAL,
    IN in_stl_away REAL,
    IN in_blk_away REAL,
    IN in_tov_away REAL,
    IN in_pf_away REAL,
    IN in_pts_away REAL,
    IN in_plus_minus_away INT,
    IN in_video_available_away INT,
    IN in_season_type TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
    int_game_id INT := in_game_id::INT;
    int_team_home INT := in_team_id_home::INT;
    int_team_away INT := in_team_id_away::INT;
    int_season_id INT := in_season_id::INT;
BEGIN
    -- Insertar equipo local si no existe
    INSERT INTO team (id, abbreviation, full_name)
    VALUES (int_team_home, in_team_abbreviation_home, in_team_name_home)
    ON CONFLICT (id) DO NOTHING;

    -- Insertar equipo visitante si no existe
    INSERT INTO team (id, abbreviation, full_name)
    VALUES (int_team_away, in_team_abbreviation_away, in_team_name_away)
    ON CONFLICT (id) DO NOTHING;

    -- Insertar en game_info si no existe
    INSERT INTO game_info (game_id)
    VALUES (int_game_id)
    ON CONFLICT (game_id) DO NOTHING;

    -- Insertar en game si no existe
    INSERT INTO game (
        season_id, team_id_home, game_id, matchup_home, wl_home, min,
        fgm_home, fga_home, fg_pct_home, fg3m_home, fg3a_home, fg3_pct_home,
        ftm_home, fta_home, ft_pct_home, oreb_home, dreb_home, reb_home,
        ast_home, stl_home, blk_home, tov_home, pf_home, pts_home, plus_minus_home,
        video_available_home, team_id_away, matchup_away, wl_away, fgm_away,
        fga_away, fg_pct_away, fg3m_away, fg3a_away, fg3_pct_away,
        ftm_away, fta_away, ft_pct_away, oreb_away, dreb_away, reb_away,
        ast_away, stl_away, blk_away, tov_away, pf_away, pts_away,
        plus_minus_away, video_available_away
    )
    SELECT
        int_season_id, int_team_home, int_game_id, in_matchup_home, in_wl_home, in_min,
        in_fgm_home, in_fga_home, in_fg_pct_home, in_fg3m_home, in_fg3a_home, in_fg3_pct_home,
        in_ftm_home, in_fta_home, in_ft_pct_home, in_oreb_home, in_dreb_home, in_reb_home,
        in_ast_home, in_stl_home, in_blk_home, in_tov_home, in_pf_home, in_pts_home, in_plus_minus_home,
        in_video_available_home, int_team_away, in_matchup_away, in_wl_away, in_fgm_away,
        in_fga_away, in_fg_pct_away, in_fg3m_away, in_fg3a_away, in_fg3_pct_away,
        in_ftm_away, in_fta_away, in_ft_pct_away, in_oreb_away, in_dreb_away, in_reb_away,
        in_ast_away, in_stl_away, in_blk_away, in_tov_away, in_pf_away, in_pts_away,
        in_plus_minus_away, in_video_available_away
    WHERE NOT EXISTS (
        SELECT 1 FROM game WHERE game_id = int_game_id
    );

    RAISE NOTICE 'Juego % insertado con éxito', int_game_id;
END;
$$;

CREATE TABLE IF NOT EXISTS equipos_perdedores_resultado (
    team_id INT,
    team_name TEXT,
    loss_location TEXT,
    opponent_id INT,
    opponent_name TEXT,
    opponent_result TEXT,
    loss_count INT
);

CREATE OR REPLACE PROCEDURE EQUIPOS_MAS_PERDEDORES()
LANGUAGE plpgsql
AS $$
BEGIN
TRUNCATE TABLE equipos_perdedores_resultado;

INSERT INTO equipos_perdedores_resultado
WITH combined_results AS (
    -- Caso donde el equipo local perdió (wl_home = 'L')
    SELECT 
        g.team_id_home AS team_id,
        'L' AS loss_location,  -- Indica que perdió como local
        g.team_id_away AS opponent_id,
        g.wl_away AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_home
    JOIN team t2 ON t2.id = g.team_id_away
    WHERE g.wl_home = 'L'
    
    UNION ALL
    
    -- Caso donde el equipo visitante perdió (wl_away = 'L')
    SELECT 
        g.team_id_away AS team_id,
        'A' AS loss_location,  -- Indica que perdió como visitante
        g.team_id_home AS opponent_id,
        g.wl_home AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_away
    JOIN team t2 ON t2.id = g.team_id_home
    WHERE g.wl_away = 'L'
)

SELECT 
    team_id,
    team_name,
    loss_location,
    opponent_id,
    opponent_name,
    opponent_result,
    COUNT(*) AS loss_count
FROM combined_results
GROUP BY team_id, team_name, loss_location, opponent_id, opponent_name, opponent_result
ORDER BY loss_count DESC
LIMIT 10;

END;
$$;

CALL EQUIPOS_MAS_PERDEDORES();
SELECT * FROM equipos_perdedores_resultado;


CREATE TABLE IF NOT EXISTS equipos_ganadores_resultado (
    team_id INT,
    team_name TEXT,
    loss_location TEXT,
    opponent_id INT,
    opponent_name TEXT,
    opponent_result TEXT,
    win_count INT
);


CREATE OR REPLACE PROCEDURE EQUIPOS_MAS_GANADORES()
LANGUAGE plpgsql
AS $$
BEGIN
TRUNCATE TABLE equipos_ganadores_resultado;

INSERT INTO equipos_ganadores_resultado
WITH combined_results AS (
    -- Caso donde el equipo local perdió (wl_home = 'L')
    SELECT 
        g.team_id_home AS team_id,
        'L' AS win_location,  -- Indica que perdió como local
        g.team_id_away AS opponent_id,
        g.wl_away AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_home
    JOIN team t2 ON t2.id = g.team_id_away
    WHERE g.wl_home = 'W'
    
    UNION ALL
    
    -- Caso donde el equipo visitante perdió (wl_away = 'L')
    SELECT 
        g.team_id_away AS team_id,
        'A' AS win_location,  -- Indica que perdió como visitante
        g.team_id_home AS opponent_id,
        g.wl_home AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_away
    JOIN team t2 ON t2.id = g.team_id_home
    WHERE g.wl_away = 'w'
)

SELECT 
    team_id,
    team_name,
    win_location,
    opponent_id,
    opponent_name,
    opponent_result,
    COUNT(*) AS win_count
FROM combined_results
GROUP BY team_id, team_name, win_location, opponent_id, opponent_name, opponent_result
ORDER BY win_count DESC
LIMIT 10;

END;
$$;

CALL EQUIPOS_MAS_GANADORES();
SELECT * FROM equipos_ganadores_resultado;



CREATE TABLE IF NOT EXISTS equipo_victima_resultado (
    team_id INT,
    team_name TEXT,
    loss_location TEXT,
    opponent_id INT,
    opponent_name TEXT,
    opponent_result TEXT,
    win_count INT
);

CREATE OR REPLACE PROCEDURE EQUIPO_VICTIMA(
	IN in_equipo INT
)
LANGUAGE plpgsql
AS $$
BEGIN
TRUNCATE TABLE equipo_victima_resultado;

INSERT INTO equipo_victima_resultado

WITH combined_results AS (
    SELECT 
        g.team_id_home AS team_id,
        'L' AS loss_location,  -- Indica que perdió como local
        g.team_id_away AS opponent_id,
        g.wl_away AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_home
    JOIN team t2 ON t2.id = g.team_id_away
    WHERE g.wl_home = 'L'
    
    UNION ALL
    
    -- Caso donde el equipo visitante perdió (wl_away = 'L')
    SELECT 
        g.team_id_away AS team_id,
        'A' AS loss_location,  -- Indica que perdió como visitante
        g.team_id_home AS opponent_id,
        g.wl_home AS opponent_result,
        t.full_name AS team_name,
        t2.full_name AS opponent_name
    FROM game g
    JOIN team t ON t.id = g.team_id_away
    JOIN team t2 ON t2.id = g.team_id_home
    WHERE g.wl_away = 'L'
)

SELECT 
    team_id,
    team_name,
    loss_location,
    opponent_id,
    opponent_name,
    opponent_result,
    COUNT(*) AS loss_count
FROM combined_results
where opponent_id = in_equipo 
GROUP BY team_id, team_name, loss_location, opponent_id, opponent_name, opponent_result
ORDER BY loss_count desc
limit 1;

END;
$$;